// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockRKEK8sServiceOptionListerMockGet  sync.RWMutex
	lockRKEK8sServiceOptionListerMockList sync.RWMutex
)

// Ensure, that RKEK8sServiceOptionListerMock does implement RKEK8sServiceOptionLister.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sServiceOptionLister = &RKEK8sServiceOptionListerMock{}

// RKEK8sServiceOptionListerMock is a mock implementation of RKEK8sServiceOptionLister.
//
//     func TestSomethingThatUsesRKEK8sServiceOptionLister(t *testing.T) {
//
//         // make and configure a mocked RKEK8sServiceOptionLister
//         mockedRKEK8sServiceOptionLister := &RKEK8sServiceOptionListerMock{
//             GetFunc: func(namespace string, name string) (*v3.RKEK8sServiceOption, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.RKEK8sServiceOption, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedRKEK8sServiceOptionLister in code that requires RKEK8sServiceOptionLister
//         // and then make assertions.
//
//     }
type RKEK8sServiceOptionListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.RKEK8sServiceOption, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.RKEK8sServiceOption, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *RKEK8sServiceOptionListerMock) Get(namespace string, name string) (*v3.RKEK8sServiceOption, error) {
	if mock.GetFunc == nil {
		panic("RKEK8sServiceOptionListerMock.GetFunc: method is nil but RKEK8sServiceOptionLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRKEK8sServiceOptionListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRKEK8sServiceOptionListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRKEK8sServiceOptionLister.GetCalls())
func (mock *RKEK8sServiceOptionListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRKEK8sServiceOptionListerMockGet.RLock()
	calls = mock.calls.Get
	lockRKEK8sServiceOptionListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RKEK8sServiceOptionListerMock) List(namespace string, selector labels.Selector) ([]*v3.RKEK8sServiceOption, error) {
	if mock.ListFunc == nil {
		panic("RKEK8sServiceOptionListerMock.ListFunc: method is nil but RKEK8sServiceOptionLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockRKEK8sServiceOptionListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRKEK8sServiceOptionListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRKEK8sServiceOptionLister.ListCalls())
func (mock *RKEK8sServiceOptionListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockRKEK8sServiceOptionListerMockList.RLock()
	calls = mock.calls.List
	lockRKEK8sServiceOptionListerMockList.RUnlock()
	return calls
}

var (
	lockRKEK8sServiceOptionControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockRKEK8sServiceOptionControllerMockAddClusterScopedHandler        sync.RWMutex
	lockRKEK8sServiceOptionControllerMockAddFeatureHandler              sync.RWMutex
	lockRKEK8sServiceOptionControllerMockAddHandler                     sync.RWMutex
	lockRKEK8sServiceOptionControllerMockEnqueue                        sync.RWMutex
	lockRKEK8sServiceOptionControllerMockGeneric                        sync.RWMutex
	lockRKEK8sServiceOptionControllerMockInformer                       sync.RWMutex
	lockRKEK8sServiceOptionControllerMockLister                         sync.RWMutex
	lockRKEK8sServiceOptionControllerMockStart                          sync.RWMutex
	lockRKEK8sServiceOptionControllerMockSync                           sync.RWMutex
)

// Ensure, that RKEK8sServiceOptionControllerMock does implement RKEK8sServiceOptionController.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sServiceOptionController = &RKEK8sServiceOptionControllerMock{}

// RKEK8sServiceOptionControllerMock is a mock implementation of RKEK8sServiceOptionController.
//
//     func TestSomethingThatUsesRKEK8sServiceOptionController(t *testing.T) {
//
//         // make and configure a mocked RKEK8sServiceOptionController
//         mockedRKEK8sServiceOptionController := &RKEK8sServiceOptionControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.RKEK8sServiceOptionLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedRKEK8sServiceOptionController in code that requires RKEK8sServiceOptionController
//         // and then make assertions.
//
//     }
type RKEK8sServiceOptionControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.RKEK8sServiceOptionHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.RKEK8sServiceOptionHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sServiceOptionHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.RKEK8sServiceOptionHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.RKEK8sServiceOptionLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.RKEK8sServiceOptionHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.RKEK8sServiceOptionHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.RKEK8sServiceOptionHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.RKEK8sServiceOptionHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RKEK8sServiceOptionControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but RKEK8sServiceOptionController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRKEK8sServiceOptionControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRKEK8sServiceOptionControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.AddClusterScopedFeatureHandlerCalls())
func (mock *RKEK8sServiceOptionControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRKEK8sServiceOptionControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RKEK8sServiceOptionControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.AddClusterScopedHandlerFunc: method is nil but RKEK8sServiceOptionController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRKEK8sServiceOptionControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRKEK8sServiceOptionControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.AddClusterScopedHandlerCalls())
func (mock *RKEK8sServiceOptionControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRKEK8sServiceOptionControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RKEK8sServiceOptionControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.AddFeatureHandlerFunc: method is nil but RKEK8sServiceOptionController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockRKEK8sServiceOptionControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRKEK8sServiceOptionControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.AddFeatureHandlerCalls())
func (mock *RKEK8sServiceOptionControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRKEK8sServiceOptionControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RKEK8sServiceOptionControllerMock) AddHandler(ctx context.Context, name string, handler v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.AddHandlerFunc: method is nil but RKEK8sServiceOptionController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRKEK8sServiceOptionControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRKEK8sServiceOptionControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.AddHandlerCalls())
func (mock *RKEK8sServiceOptionControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRKEK8sServiceOptionControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *RKEK8sServiceOptionControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.EnqueueFunc: method is nil but RKEK8sServiceOptionController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRKEK8sServiceOptionControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockRKEK8sServiceOptionControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.EnqueueCalls())
func (mock *RKEK8sServiceOptionControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRKEK8sServiceOptionControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockRKEK8sServiceOptionControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *RKEK8sServiceOptionControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.GenericFunc: method is nil but RKEK8sServiceOptionController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sServiceOptionControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockRKEK8sServiceOptionControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.GenericCalls())
func (mock *RKEK8sServiceOptionControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sServiceOptionControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockRKEK8sServiceOptionControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *RKEK8sServiceOptionControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.InformerFunc: method is nil but RKEK8sServiceOptionController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sServiceOptionControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockRKEK8sServiceOptionControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.InformerCalls())
func (mock *RKEK8sServiceOptionControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sServiceOptionControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockRKEK8sServiceOptionControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *RKEK8sServiceOptionControllerMock) Lister() v3.RKEK8sServiceOptionLister {
	if mock.ListerFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.ListerFunc: method is nil but RKEK8sServiceOptionController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sServiceOptionControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockRKEK8sServiceOptionControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.ListerCalls())
func (mock *RKEK8sServiceOptionControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sServiceOptionControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockRKEK8sServiceOptionControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *RKEK8sServiceOptionControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.StartFunc: method is nil but RKEK8sServiceOptionController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockRKEK8sServiceOptionControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockRKEK8sServiceOptionControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.StartCalls())
func (mock *RKEK8sServiceOptionControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockRKEK8sServiceOptionControllerMockStart.RLock()
	calls = mock.calls.Start
	lockRKEK8sServiceOptionControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *RKEK8sServiceOptionControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("RKEK8sServiceOptionControllerMock.SyncFunc: method is nil but RKEK8sServiceOptionController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockRKEK8sServiceOptionControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockRKEK8sServiceOptionControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedRKEK8sServiceOptionController.SyncCalls())
func (mock *RKEK8sServiceOptionControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockRKEK8sServiceOptionControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockRKEK8sServiceOptionControllerMockSync.RUnlock()
	return calls
}

var (
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockAddFeatureHandler                sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockAddHandler                       sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockAddLifecycle                     sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockController                       sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockCreate                           sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockDelete                           sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockDeleteCollection                 sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockGet                              sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockGetNamespaced                    sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockList                             sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockObjectClient                     sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockUpdate                           sync.RWMutex
	lockRKEK8sServiceOptionInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that RKEK8sServiceOptionInterfaceMock does implement RKEK8sServiceOptionInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sServiceOptionInterface = &RKEK8sServiceOptionInterfaceMock{}

// RKEK8sServiceOptionInterfaceMock is a mock implementation of RKEK8sServiceOptionInterface.
//
//     func TestSomethingThatUsesRKEK8sServiceOptionInterface(t *testing.T) {
//
//         // make and configure a mocked RKEK8sServiceOptionInterface
//         mockedRKEK8sServiceOptionInterface := &RKEK8sServiceOptionInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.RKEK8sServiceOptionLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.RKEK8sServiceOptionLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.RKEK8sServiceOptionLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.RKEK8sServiceOptionHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.RKEK8sServiceOptionLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.RKEK8sServiceOptionController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.RKEK8sServiceOption) (*v3.RKEK8sServiceOption, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.RKEK8sServiceOption, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.RKEK8sServiceOption, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.RKEK8sServiceOptionList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.RKEK8sServiceOption) (*v3.RKEK8sServiceOption, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRKEK8sServiceOptionInterface in code that requires RKEK8sServiceOptionInterface
//         // and then make assertions.
//
//     }
type RKEK8sServiceOptionInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.RKEK8sServiceOptionHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.RKEK8sServiceOptionLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.RKEK8sServiceOptionHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.RKEK8sServiceOptionLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sServiceOptionHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.RKEK8sServiceOptionLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.RKEK8sServiceOptionHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.RKEK8sServiceOptionLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.RKEK8sServiceOptionController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.RKEK8sServiceOption) (*v3.RKEK8sServiceOption, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.RKEK8sServiceOption, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.RKEK8sServiceOption, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.RKEK8sServiceOptionList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.RKEK8sServiceOption) (*v3.RKEK8sServiceOption, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.RKEK8sServiceOptionHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sServiceOptionLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.RKEK8sServiceOptionHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sServiceOptionLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.RKEK8sServiceOptionHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sServiceOptionLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.RKEK8sServiceOptionHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sServiceOptionLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.RKEK8sServiceOption
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.RKEK8sServiceOption
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but RKEK8sServiceOptionInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.RKEK8sServiceOptionLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but RKEK8sServiceOptionInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sServiceOptionLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.RKEK8sServiceOptionLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sServiceOptionLifecycle
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddClusterScopedHandlerFunc: method is nil but RKEK8sServiceOptionInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddClusterScopedHandlerCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.RKEK8sServiceOptionLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but RKEK8sServiceOptionInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sServiceOptionLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddClusterScopedLifecycleCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.RKEK8sServiceOptionLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sServiceOptionLifecycle
	}
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockRKEK8sServiceOptionInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddFeatureHandlerFunc: method is nil but RKEK8sServiceOptionInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockRKEK8sServiceOptionInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddFeatureHandlerCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRKEK8sServiceOptionInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.RKEK8sServiceOptionLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddFeatureLifecycleFunc: method is nil but RKEK8sServiceOptionInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.RKEK8sServiceOptionLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRKEK8sServiceOptionInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddFeatureLifecycleCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.RKEK8sServiceOptionLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.RKEK8sServiceOptionLifecycle
	}
	lockRKEK8sServiceOptionInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockRKEK8sServiceOptionInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.RKEK8sServiceOptionHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddHandlerFunc: method is nil but RKEK8sServiceOptionInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.RKEK8sServiceOptionHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRKEK8sServiceOptionInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddHandlerCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.RKEK8sServiceOptionHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.RKEK8sServiceOptionHandlerFunc
	}
	lockRKEK8sServiceOptionInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRKEK8sServiceOptionInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.RKEK8sServiceOptionLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.AddLifecycleFunc: method is nil but RKEK8sServiceOptionInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.RKEK8sServiceOptionLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRKEK8sServiceOptionInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockRKEK8sServiceOptionInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.AddLifecycleCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.RKEK8sServiceOptionLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.RKEK8sServiceOptionLifecycle
	}
	lockRKEK8sServiceOptionInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockRKEK8sServiceOptionInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) Controller() v3.RKEK8sServiceOptionController {
	if mock.ControllerFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.ControllerFunc: method is nil but RKEK8sServiceOptionInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sServiceOptionInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockRKEK8sServiceOptionInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.ControllerCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sServiceOptionInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockRKEK8sServiceOptionInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) Create(in1 *v3.RKEK8sServiceOption) (*v3.RKEK8sServiceOption, error) {
	if mock.CreateFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.CreateFunc: method is nil but RKEK8sServiceOptionInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.RKEK8sServiceOption
	}{
		In1: in1,
	}
	lockRKEK8sServiceOptionInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRKEK8sServiceOptionInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.CreateCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) CreateCalls() []struct {
	In1 *v3.RKEK8sServiceOption
} {
	var calls []struct {
		In1 *v3.RKEK8sServiceOption
	}
	lockRKEK8sServiceOptionInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockRKEK8sServiceOptionInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.DeleteFunc: method is nil but RKEK8sServiceOptionInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRKEK8sServiceOptionInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRKEK8sServiceOptionInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.DeleteCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockRKEK8sServiceOptionInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockRKEK8sServiceOptionInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.DeleteCollectionFunc: method is nil but RKEK8sServiceOptionInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockRKEK8sServiceOptionInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockRKEK8sServiceOptionInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.DeleteCollectionCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockRKEK8sServiceOptionInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockRKEK8sServiceOptionInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.DeleteNamespacedFunc: method is nil but RKEK8sServiceOptionInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRKEK8sServiceOptionInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockRKEK8sServiceOptionInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.DeleteNamespacedCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockRKEK8sServiceOptionInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockRKEK8sServiceOptionInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.RKEK8sServiceOption, error) {
	if mock.GetFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.GetFunc: method is nil but RKEK8sServiceOptionInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockRKEK8sServiceOptionInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRKEK8sServiceOptionInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.GetCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockRKEK8sServiceOptionInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockRKEK8sServiceOptionInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.RKEK8sServiceOption, error) {
	if mock.GetNamespacedFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.GetNamespacedFunc: method is nil but RKEK8sServiceOptionInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockRKEK8sServiceOptionInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockRKEK8sServiceOptionInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.GetNamespacedCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockRKEK8sServiceOptionInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockRKEK8sServiceOptionInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) List(opts v1.ListOptions) (*v3.RKEK8sServiceOptionList, error) {
	if mock.ListFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.ListFunc: method is nil but RKEK8sServiceOptionInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockRKEK8sServiceOptionInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRKEK8sServiceOptionInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.ListCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockRKEK8sServiceOptionInterfaceMockList.RLock()
	calls = mock.calls.List
	lockRKEK8sServiceOptionInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.ObjectClientFunc: method is nil but RKEK8sServiceOptionInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sServiceOptionInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockRKEK8sServiceOptionInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.ObjectClientCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sServiceOptionInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockRKEK8sServiceOptionInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) Update(in1 *v3.RKEK8sServiceOption) (*v3.RKEK8sServiceOption, error) {
	if mock.UpdateFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.UpdateFunc: method is nil but RKEK8sServiceOptionInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.RKEK8sServiceOption
	}{
		In1: in1,
	}
	lockRKEK8sServiceOptionInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRKEK8sServiceOptionInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.UpdateCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) UpdateCalls() []struct {
	In1 *v3.RKEK8sServiceOption
} {
	var calls []struct {
		In1 *v3.RKEK8sServiceOption
	}
	lockRKEK8sServiceOptionInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockRKEK8sServiceOptionInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RKEK8sServiceOptionInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RKEK8sServiceOptionInterfaceMock.WatchFunc: method is nil but RKEK8sServiceOptionInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockRKEK8sServiceOptionInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRKEK8sServiceOptionInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRKEK8sServiceOptionInterface.WatchCalls())
func (mock *RKEK8sServiceOptionInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockRKEK8sServiceOptionInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockRKEK8sServiceOptionInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockRKEK8sServiceOptionsGetterMockRKEK8sServiceOptions sync.RWMutex
)

// Ensure, that RKEK8sServiceOptionsGetterMock does implement RKEK8sServiceOptionsGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sServiceOptionsGetter = &RKEK8sServiceOptionsGetterMock{}

// RKEK8sServiceOptionsGetterMock is a mock implementation of RKEK8sServiceOptionsGetter.
//
//     func TestSomethingThatUsesRKEK8sServiceOptionsGetter(t *testing.T) {
//
//         // make and configure a mocked RKEK8sServiceOptionsGetter
//         mockedRKEK8sServiceOptionsGetter := &RKEK8sServiceOptionsGetterMock{
//             RKEK8sServiceOptionsFunc: func(namespace string) v3.RKEK8sServiceOptionInterface {
// 	               panic("mock out the RKEK8sServiceOptions method")
//             },
//         }
//
//         // use mockedRKEK8sServiceOptionsGetter in code that requires RKEK8sServiceOptionsGetter
//         // and then make assertions.
//
//     }
type RKEK8sServiceOptionsGetterMock struct {
	// RKEK8sServiceOptionsFunc mocks the RKEK8sServiceOptions method.
	RKEK8sServiceOptionsFunc func(namespace string) v3.RKEK8sServiceOptionInterface

	// calls tracks calls to the methods.
	calls struct {
		// RKEK8sServiceOptions holds details about calls to the RKEK8sServiceOptions method.
		RKEK8sServiceOptions []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// RKEK8sServiceOptions calls RKEK8sServiceOptionsFunc.
func (mock *RKEK8sServiceOptionsGetterMock) RKEK8sServiceOptions(namespace string) v3.RKEK8sServiceOptionInterface {
	if mock.RKEK8sServiceOptionsFunc == nil {
		panic("RKEK8sServiceOptionsGetterMock.RKEK8sServiceOptionsFunc: method is nil but RKEK8sServiceOptionsGetter.RKEK8sServiceOptions was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockRKEK8sServiceOptionsGetterMockRKEK8sServiceOptions.Lock()
	mock.calls.RKEK8sServiceOptions = append(mock.calls.RKEK8sServiceOptions, callInfo)
	lockRKEK8sServiceOptionsGetterMockRKEK8sServiceOptions.Unlock()
	return mock.RKEK8sServiceOptionsFunc(namespace)
}

// RKEK8sServiceOptionsCalls gets all the calls that were made to RKEK8sServiceOptions.
// Check the length with:
//     len(mockedRKEK8sServiceOptionsGetter.RKEK8sServiceOptionsCalls())
func (mock *RKEK8sServiceOptionsGetterMock) RKEK8sServiceOptionsCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockRKEK8sServiceOptionsGetterMockRKEK8sServiceOptions.RLock()
	calls = mock.calls.RKEK8sServiceOptions
	lockRKEK8sServiceOptionsGetterMockRKEK8sServiceOptions.RUnlock()
	return calls
}
