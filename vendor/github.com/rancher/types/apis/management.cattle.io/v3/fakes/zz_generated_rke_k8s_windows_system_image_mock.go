// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v3 "github.com/rancher/types/apis/management.cattle.io/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockRKEK8sWindowsSystemImageListerMockGet  sync.RWMutex
	lockRKEK8sWindowsSystemImageListerMockList sync.RWMutex
)

// Ensure, that RKEK8sWindowsSystemImageListerMock does implement RKEK8sWindowsSystemImageLister.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sWindowsSystemImageLister = &RKEK8sWindowsSystemImageListerMock{}

// RKEK8sWindowsSystemImageListerMock is a mock implementation of RKEK8sWindowsSystemImageLister.
//
//     func TestSomethingThatUsesRKEK8sWindowsSystemImageLister(t *testing.T) {
//
//         // make and configure a mocked RKEK8sWindowsSystemImageLister
//         mockedRKEK8sWindowsSystemImageLister := &RKEK8sWindowsSystemImageListerMock{
//             GetFunc: func(namespace string, name string) (*v3.RKEK8sWindowsSystemImage, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v3.RKEK8sWindowsSystemImage, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedRKEK8sWindowsSystemImageLister in code that requires RKEK8sWindowsSystemImageLister
//         // and then make assertions.
//
//     }
type RKEK8sWindowsSystemImageListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v3.RKEK8sWindowsSystemImage, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v3.RKEK8sWindowsSystemImage, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *RKEK8sWindowsSystemImageListerMock) Get(namespace string, name string) (*v3.RKEK8sWindowsSystemImage, error) {
	if mock.GetFunc == nil {
		panic("RKEK8sWindowsSystemImageListerMock.GetFunc: method is nil but RKEK8sWindowsSystemImageLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRKEK8sWindowsSystemImageListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRKEK8sWindowsSystemImageListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageLister.GetCalls())
func (mock *RKEK8sWindowsSystemImageListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRKEK8sWindowsSystemImageListerMockGet.RLock()
	calls = mock.calls.Get
	lockRKEK8sWindowsSystemImageListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RKEK8sWindowsSystemImageListerMock) List(namespace string, selector labels.Selector) ([]*v3.RKEK8sWindowsSystemImage, error) {
	if mock.ListFunc == nil {
		panic("RKEK8sWindowsSystemImageListerMock.ListFunc: method is nil but RKEK8sWindowsSystemImageLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockRKEK8sWindowsSystemImageListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRKEK8sWindowsSystemImageListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageLister.ListCalls())
func (mock *RKEK8sWindowsSystemImageListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockRKEK8sWindowsSystemImageListerMockList.RLock()
	calls = mock.calls.List
	lockRKEK8sWindowsSystemImageListerMockList.RUnlock()
	return calls
}

var (
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedFeatureHandler sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedHandler        sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockAddFeatureHandler              sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockAddHandler                     sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockEnqueue                        sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockGeneric                        sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockInformer                       sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockLister                         sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockStart                          sync.RWMutex
	lockRKEK8sWindowsSystemImageControllerMockSync                           sync.RWMutex
)

// Ensure, that RKEK8sWindowsSystemImageControllerMock does implement RKEK8sWindowsSystemImageController.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sWindowsSystemImageController = &RKEK8sWindowsSystemImageControllerMock{}

// RKEK8sWindowsSystemImageControllerMock is a mock implementation of RKEK8sWindowsSystemImageController.
//
//     func TestSomethingThatUsesRKEK8sWindowsSystemImageController(t *testing.T) {
//
//         // make and configure a mocked RKEK8sWindowsSystemImageController
//         mockedRKEK8sWindowsSystemImageController := &RKEK8sWindowsSystemImageControllerMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v3.RKEK8sWindowsSystemImageLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedRKEK8sWindowsSystemImageController in code that requires RKEK8sWindowsSystemImageController
//         // and then make assertions.
//
//     }
type RKEK8sWindowsSystemImageControllerMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.RKEK8sWindowsSystemImageHandlerFunc)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v3.RKEK8sWindowsSystemImageHandlerFunc)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v3.RKEK8sWindowsSystemImageHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v3.RKEK8sWindowsSystemImageLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, handler v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.AddClusterScopedFeatureHandlerFunc: method is nil but RKEK8sWindowsSystemImageController.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, handler)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.AddClusterScopedFeatureHandlerCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Handler     v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Handler     v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.AddClusterScopedHandlerFunc: method is nil but RKEK8sWindowsSystemImageController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.AddClusterScopedHandlerCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRKEK8sWindowsSystemImageControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.AddFeatureHandlerFunc: method is nil but RKEK8sWindowsSystemImageController.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockRKEK8sWindowsSystemImageControllerMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.AddFeatureHandlerCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageControllerMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRKEK8sWindowsSystemImageControllerMockAddFeatureHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) AddHandler(ctx context.Context, name string, handler v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.AddHandlerFunc: method is nil but RKEK8sWindowsSystemImageController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockRKEK8sWindowsSystemImageControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.AddHandlerCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRKEK8sWindowsSystemImageControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.EnqueueFunc: method is nil but RKEK8sWindowsSystemImageController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockRKEK8sWindowsSystemImageControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.EnqueueCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockRKEK8sWindowsSystemImageControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockRKEK8sWindowsSystemImageControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.GenericFunc: method is nil but RKEK8sWindowsSystemImageController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sWindowsSystemImageControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.GenericCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sWindowsSystemImageControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockRKEK8sWindowsSystemImageControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.InformerFunc: method is nil but RKEK8sWindowsSystemImageController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sWindowsSystemImageControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.InformerCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sWindowsSystemImageControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockRKEK8sWindowsSystemImageControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) Lister() v3.RKEK8sWindowsSystemImageLister {
	if mock.ListerFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.ListerFunc: method is nil but RKEK8sWindowsSystemImageController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sWindowsSystemImageControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.ListerCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sWindowsSystemImageControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockRKEK8sWindowsSystemImageControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.StartFunc: method is nil but RKEK8sWindowsSystemImageController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockRKEK8sWindowsSystemImageControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.StartCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockRKEK8sWindowsSystemImageControllerMockStart.RLock()
	calls = mock.calls.Start
	lockRKEK8sWindowsSystemImageControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *RKEK8sWindowsSystemImageControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("RKEK8sWindowsSystemImageControllerMock.SyncFunc: method is nil but RKEK8sWindowsSystemImageController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockRKEK8sWindowsSystemImageControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockRKEK8sWindowsSystemImageControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageController.SyncCalls())
func (mock *RKEK8sWindowsSystemImageControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockRKEK8sWindowsSystemImageControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockRKEK8sWindowsSystemImageControllerMockSync.RUnlock()
	return calls
}

var (
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureHandler   sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureLifecycle sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedHandler          sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedLifecycle        sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureHandler                sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureLifecycle              sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockAddHandler                       sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockAddLifecycle                     sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockController                       sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockCreate                           sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockDelete                           sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteCollection                 sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteNamespaced                 sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockGet                              sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockGetNamespaced                    sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockList                             sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockObjectClient                     sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockUpdate                           sync.RWMutex
	lockRKEK8sWindowsSystemImageInterfaceMockWatch                            sync.RWMutex
)

// Ensure, that RKEK8sWindowsSystemImageInterfaceMock does implement RKEK8sWindowsSystemImageInterface.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sWindowsSystemImageInterface = &RKEK8sWindowsSystemImageInterfaceMock{}

// RKEK8sWindowsSystemImageInterfaceMock is a mock implementation of RKEK8sWindowsSystemImageInterface.
//
//     func TestSomethingThatUsesRKEK8sWindowsSystemImageInterface(t *testing.T) {
//
//         // make and configure a mocked RKEK8sWindowsSystemImageInterface
//         mockedRKEK8sWindowsSystemImageInterface := &RKEK8sWindowsSystemImageInterfaceMock{
//             AddClusterScopedFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedFeatureHandler method")
//             },
//             AddClusterScopedFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)  {
// 	               panic("mock out the AddClusterScopedFeatureLifecycle method")
//             },
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddFeatureHandlerFunc: func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddFeatureHandler method")
//             },
//             AddFeatureLifecycleFunc: func(ctx context.Context, enabled func() bool, name string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)  {
// 	               panic("mock out the AddFeatureLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v3.RKEK8sWindowsSystemImageController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v3.RKEK8sWindowsSystemImage) (*v3.RKEK8sWindowsSystemImage, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1.GetOptions) (*v3.RKEK8sWindowsSystemImage, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1.GetOptions) (*v3.RKEK8sWindowsSystemImage, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1.ListOptions) (*v3.RKEK8sWindowsSystemImageList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v3.RKEK8sWindowsSystemImage) (*v3.RKEK8sWindowsSystemImage, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedRKEK8sWindowsSystemImageInterface in code that requires RKEK8sWindowsSystemImageInterface
//         // and then make assertions.
//
//     }
type RKEK8sWindowsSystemImageInterfaceMock struct {
	// AddClusterScopedFeatureHandlerFunc mocks the AddClusterScopedFeatureHandler method.
	AddClusterScopedFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)

	// AddClusterScopedFeatureLifecycleFunc mocks the AddClusterScopedFeatureLifecycle method.
	AddClusterScopedFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)

	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)

	// AddFeatureHandlerFunc mocks the AddFeatureHandler method.
	AddFeatureHandlerFunc func(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)

	// AddFeatureLifecycleFunc mocks the AddFeatureLifecycle method.
	AddFeatureLifecycleFunc func(ctx context.Context, enabled func() bool, name string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v3.RKEK8sWindowsSystemImageController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v3.RKEK8sWindowsSystemImage) (*v3.RKEK8sWindowsSystemImage, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1.GetOptions) (*v3.RKEK8sWindowsSystemImage, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1.GetOptions) (*v3.RKEK8sWindowsSystemImage, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1.ListOptions) (*v3.RKEK8sWindowsSystemImageList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v3.RKEK8sWindowsSystemImage) (*v3.RKEK8sWindowsSystemImage, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedFeatureHandler holds details about calls to the AddClusterScopedFeatureHandler method.
		AddClusterScopedFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// AddClusterScopedFeatureLifecycle holds details about calls to the AddClusterScopedFeatureLifecycle method.
		AddClusterScopedFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
		}
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
		}
		// AddFeatureHandler holds details about calls to the AddFeatureHandler method.
		AddFeatureHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// AddFeatureLifecycle holds details about calls to the AddFeatureLifecycle method.
		AddFeatureLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Enabled is the enabled argument value.
			Enabled func() bool
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v3.RKEK8sWindowsSystemImageHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v3.RKEK8sWindowsSystemImage
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v3.RKEK8sWindowsSystemImage
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1.ListOptions
		}
	}
}

// AddClusterScopedFeatureHandler calls AddClusterScopedFeatureHandlerFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedFeatureHandler(ctx context.Context, enabled func() bool, name string, clusterName string, sync v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddClusterScopedFeatureHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddClusterScopedFeatureHandlerFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddClusterScopedFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureHandler.Lock()
	mock.calls.AddClusterScopedFeatureHandler = append(mock.calls.AddClusterScopedFeatureHandler, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureHandler.Unlock()
	mock.AddClusterScopedFeatureHandlerFunc(ctx, enabled, name, clusterName, sync)
}

// AddClusterScopedFeatureHandlerCalls gets all the calls that were made to AddClusterScopedFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddClusterScopedFeatureHandlerCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedFeatureHandlerCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Sync        v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Sync        v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureHandler.RLock()
	calls = mock.calls.AddClusterScopedFeatureHandler
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureHandler.RUnlock()
	return calls
}

// AddClusterScopedFeatureLifecycle calls AddClusterScopedFeatureLifecycleFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedFeatureLifecycle(ctx context.Context, enabled func() bool, name string, clusterName string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle) {
	if mock.AddClusterScopedFeatureLifecycleFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddClusterScopedFeatureLifecycleFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddClusterScopedFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sWindowsSystemImageLifecycle
	}{
		Ctx:         ctx,
		Enabled:     enabled,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureLifecycle.Lock()
	mock.calls.AddClusterScopedFeatureLifecycle = append(mock.calls.AddClusterScopedFeatureLifecycle, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureLifecycle.Unlock()
	mock.AddClusterScopedFeatureLifecycleFunc(ctx, enabled, name, clusterName, lifecycle)
}

// AddClusterScopedFeatureLifecycleCalls gets all the calls that were made to AddClusterScopedFeatureLifecycle.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddClusterScopedFeatureLifecycleCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedFeatureLifecycleCalls() []struct {
	Ctx         context.Context
	Enabled     func() bool
	Name        string
	ClusterName string
	Lifecycle   v3.RKEK8sWindowsSystemImageLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Enabled     func() bool
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sWindowsSystemImageLifecycle
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureLifecycle.RLock()
	calls = mock.calls.AddClusterScopedFeatureLifecycle
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedFeatureLifecycle.RUnlock()
	return calls
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddClusterScopedHandlerFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddClusterScopedHandlerCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sWindowsSystemImageLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddClusterScopedLifecycleCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v3.RKEK8sWindowsSystemImageLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v3.RKEK8sWindowsSystemImageLifecycle
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockRKEK8sWindowsSystemImageInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddFeatureHandler calls AddFeatureHandlerFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddFeatureHandler(ctx context.Context, enabled func() bool, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddFeatureHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddFeatureHandlerFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddFeatureHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:     ctx,
		Enabled: enabled,
		Name:    name,
		Sync:    sync,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureHandler.Lock()
	mock.calls.AddFeatureHandler = append(mock.calls.AddFeatureHandler, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureHandler.Unlock()
	mock.AddFeatureHandlerFunc(ctx, enabled, name, sync)
}

// AddFeatureHandlerCalls gets all the calls that were made to AddFeatureHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddFeatureHandlerCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddFeatureHandlerCalls() []struct {
	Ctx     context.Context
	Enabled func() bool
	Name    string
	Sync    v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Enabled func() bool
		Name    string
		Sync    v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureHandler.RLock()
	calls = mock.calls.AddFeatureHandler
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureHandler.RUnlock()
	return calls
}

// AddFeatureLifecycle calls AddFeatureLifecycleFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddFeatureLifecycle(ctx context.Context, enabled func() bool, name string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle) {
	if mock.AddFeatureLifecycleFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddFeatureLifecycleFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddFeatureLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
	}{
		Ctx:       ctx,
		Enabled:   enabled,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureLifecycle.Lock()
	mock.calls.AddFeatureLifecycle = append(mock.calls.AddFeatureLifecycle, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureLifecycle.Unlock()
	mock.AddFeatureLifecycleFunc(ctx, enabled, name, lifecycle)
}

// AddFeatureLifecycleCalls gets all the calls that were made to AddFeatureLifecycle.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddFeatureLifecycleCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddFeatureLifecycleCalls() []struct {
	Ctx       context.Context
	Enabled   func() bool
	Name      string
	Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Enabled   func() bool
		Name      string
		Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureLifecycle.RLock()
	calls = mock.calls.AddFeatureLifecycle
	lockRKEK8sWindowsSystemImageInterfaceMockAddFeatureLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddHandler(ctx context.Context, name string, sync v3.RKEK8sWindowsSystemImageHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddHandlerFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v3.RKEK8sWindowsSystemImageHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddHandlerCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v3.RKEK8sWindowsSystemImageHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v3.RKEK8sWindowsSystemImageHandlerFunc
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockRKEK8sWindowsSystemImageInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v3.RKEK8sWindowsSystemImageLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.AddLifecycleFunc: method is nil but RKEK8sWindowsSystemImageInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.AddLifecycleCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v3.RKEK8sWindowsSystemImageLifecycle
	}
	lockRKEK8sWindowsSystemImageInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockRKEK8sWindowsSystemImageInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) Controller() v3.RKEK8sWindowsSystemImageController {
	if mock.ControllerFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.ControllerFunc: method is nil but RKEK8sWindowsSystemImageInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sWindowsSystemImageInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.ControllerCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sWindowsSystemImageInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockRKEK8sWindowsSystemImageInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) Create(in1 *v3.RKEK8sWindowsSystemImage) (*v3.RKEK8sWindowsSystemImage, error) {
	if mock.CreateFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.CreateFunc: method is nil but RKEK8sWindowsSystemImageInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v3.RKEK8sWindowsSystemImage
	}{
		In1: in1,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.CreateCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) CreateCalls() []struct {
	In1 *v3.RKEK8sWindowsSystemImage
} {
	var calls []struct {
		In1 *v3.RKEK8sWindowsSystemImage
	}
	lockRKEK8sWindowsSystemImageInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockRKEK8sWindowsSystemImageInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) Delete(name string, options *v1.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.DeleteFunc: method is nil but RKEK8sWindowsSystemImageInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.DeleteCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1.DeleteOptions
	}
	lockRKEK8sWindowsSystemImageInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockRKEK8sWindowsSystemImageInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) DeleteCollection(deleteOpts *v1.DeleteOptions, listOpts v1.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.DeleteCollectionFunc: method is nil but RKEK8sWindowsSystemImageInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.DeleteCollectionCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1.DeleteOptions
	ListOpts   v1.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1.DeleteOptions
		ListOpts   v1.ListOptions
	}
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.DeleteNamespacedFunc: method is nil but RKEK8sWindowsSystemImageInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.DeleteNamespacedCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1.DeleteOptions
	}
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockRKEK8sWindowsSystemImageInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) Get(name string, opts v1.GetOptions) (*v3.RKEK8sWindowsSystemImage, error) {
	if mock.GetFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.GetFunc: method is nil but RKEK8sWindowsSystemImageInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.GetCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1.GetOptions
	}
	lockRKEK8sWindowsSystemImageInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockRKEK8sWindowsSystemImageInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) GetNamespaced(namespace string, name string, opts v1.GetOptions) (*v3.RKEK8sWindowsSystemImage, error) {
	if mock.GetNamespacedFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.GetNamespacedFunc: method is nil but RKEK8sWindowsSystemImageInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.GetNamespacedCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1.GetOptions
	}
	lockRKEK8sWindowsSystemImageInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockRKEK8sWindowsSystemImageInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) List(opts v1.ListOptions) (*v3.RKEK8sWindowsSystemImageList, error) {
	if mock.ListFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.ListFunc: method is nil but RKEK8sWindowsSystemImageInterface.List was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.ListCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) ListCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockRKEK8sWindowsSystemImageInterfaceMockList.RLock()
	calls = mock.calls.List
	lockRKEK8sWindowsSystemImageInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.ObjectClientFunc: method is nil but RKEK8sWindowsSystemImageInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockRKEK8sWindowsSystemImageInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.ObjectClientCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockRKEK8sWindowsSystemImageInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockRKEK8sWindowsSystemImageInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) Update(in1 *v3.RKEK8sWindowsSystemImage) (*v3.RKEK8sWindowsSystemImage, error) {
	if mock.UpdateFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.UpdateFunc: method is nil but RKEK8sWindowsSystemImageInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v3.RKEK8sWindowsSystemImage
	}{
		In1: in1,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.UpdateCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) UpdateCalls() []struct {
	In1 *v3.RKEK8sWindowsSystemImage
} {
	var calls []struct {
		In1 *v3.RKEK8sWindowsSystemImage
	}
	lockRKEK8sWindowsSystemImageInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockRKEK8sWindowsSystemImageInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *RKEK8sWindowsSystemImageInterfaceMock) Watch(opts v1.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("RKEK8sWindowsSystemImageInterfaceMock.WatchFunc: method is nil but RKEK8sWindowsSystemImageInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1.ListOptions
	}{
		Opts: opts,
	}
	lockRKEK8sWindowsSystemImageInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockRKEK8sWindowsSystemImageInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImageInterface.WatchCalls())
func (mock *RKEK8sWindowsSystemImageInterfaceMock) WatchCalls() []struct {
	Opts v1.ListOptions
} {
	var calls []struct {
		Opts v1.ListOptions
	}
	lockRKEK8sWindowsSystemImageInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockRKEK8sWindowsSystemImageInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockRKEK8sWindowsSystemImagesGetterMockRKEK8sWindowsSystemImages sync.RWMutex
)

// Ensure, that RKEK8sWindowsSystemImagesGetterMock does implement RKEK8sWindowsSystemImagesGetter.
// If this is not the case, regenerate this file with moq.
var _ v3.RKEK8sWindowsSystemImagesGetter = &RKEK8sWindowsSystemImagesGetterMock{}

// RKEK8sWindowsSystemImagesGetterMock is a mock implementation of RKEK8sWindowsSystemImagesGetter.
//
//     func TestSomethingThatUsesRKEK8sWindowsSystemImagesGetter(t *testing.T) {
//
//         // make and configure a mocked RKEK8sWindowsSystemImagesGetter
//         mockedRKEK8sWindowsSystemImagesGetter := &RKEK8sWindowsSystemImagesGetterMock{
//             RKEK8sWindowsSystemImagesFunc: func(namespace string) v3.RKEK8sWindowsSystemImageInterface {
// 	               panic("mock out the RKEK8sWindowsSystemImages method")
//             },
//         }
//
//         // use mockedRKEK8sWindowsSystemImagesGetter in code that requires RKEK8sWindowsSystemImagesGetter
//         // and then make assertions.
//
//     }
type RKEK8sWindowsSystemImagesGetterMock struct {
	// RKEK8sWindowsSystemImagesFunc mocks the RKEK8sWindowsSystemImages method.
	RKEK8sWindowsSystemImagesFunc func(namespace string) v3.RKEK8sWindowsSystemImageInterface

	// calls tracks calls to the methods.
	calls struct {
		// RKEK8sWindowsSystemImages holds details about calls to the RKEK8sWindowsSystemImages method.
		RKEK8sWindowsSystemImages []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// RKEK8sWindowsSystemImages calls RKEK8sWindowsSystemImagesFunc.
func (mock *RKEK8sWindowsSystemImagesGetterMock) RKEK8sWindowsSystemImages(namespace string) v3.RKEK8sWindowsSystemImageInterface {
	if mock.RKEK8sWindowsSystemImagesFunc == nil {
		panic("RKEK8sWindowsSystemImagesGetterMock.RKEK8sWindowsSystemImagesFunc: method is nil but RKEK8sWindowsSystemImagesGetter.RKEK8sWindowsSystemImages was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockRKEK8sWindowsSystemImagesGetterMockRKEK8sWindowsSystemImages.Lock()
	mock.calls.RKEK8sWindowsSystemImages = append(mock.calls.RKEK8sWindowsSystemImages, callInfo)
	lockRKEK8sWindowsSystemImagesGetterMockRKEK8sWindowsSystemImages.Unlock()
	return mock.RKEK8sWindowsSystemImagesFunc(namespace)
}

// RKEK8sWindowsSystemImagesCalls gets all the calls that were made to RKEK8sWindowsSystemImages.
// Check the length with:
//     len(mockedRKEK8sWindowsSystemImagesGetter.RKEK8sWindowsSystemImagesCalls())
func (mock *RKEK8sWindowsSystemImagesGetterMock) RKEK8sWindowsSystemImagesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockRKEK8sWindowsSystemImagesGetterMockRKEK8sWindowsSystemImages.RLock()
	calls = mock.calls.RKEK8sWindowsSystemImages
	lockRKEK8sWindowsSystemImagesGetterMockRKEK8sWindowsSystemImages.RUnlock()
	return calls
}
