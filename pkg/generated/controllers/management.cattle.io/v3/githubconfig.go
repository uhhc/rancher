/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type GithubConfigHandler func(string, *v3.GithubConfig) (*v3.GithubConfig, error)

type GithubConfigController interface {
	generic.ControllerMeta
	GithubConfigClient

	OnChange(ctx context.Context, name string, sync GithubConfigHandler)
	OnRemove(ctx context.Context, name string, sync GithubConfigHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() GithubConfigCache
}

type GithubConfigClient interface {
	Create(*v3.GithubConfig) (*v3.GithubConfig, error)
	Update(*v3.GithubConfig) (*v3.GithubConfig, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.GithubConfig, error)
	List(opts metav1.ListOptions) (*v3.GithubConfigList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.GithubConfig, err error)
}

type GithubConfigCache interface {
	Get(name string) (*v3.GithubConfig, error)
	List(selector labels.Selector) ([]*v3.GithubConfig, error)

	AddIndexer(indexName string, indexer GithubConfigIndexer)
	GetByIndex(indexName, key string) ([]*v3.GithubConfig, error)
}

type GithubConfigIndexer func(obj *v3.GithubConfig) ([]string, error)

type githubConfigController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewGithubConfigController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) GithubConfigController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &githubConfigController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromGithubConfigHandlerToHandler(sync GithubConfigHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v3.GithubConfig
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v3.GithubConfig))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *githubConfigController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v3.GithubConfig))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateGithubConfigDeepCopyOnChange(client GithubConfigClient, obj *v3.GithubConfig, handler func(obj *v3.GithubConfig) (*v3.GithubConfig, error)) (*v3.GithubConfig, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *githubConfigController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *githubConfigController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *githubConfigController) OnChange(ctx context.Context, name string, sync GithubConfigHandler) {
	c.AddGenericHandler(ctx, name, FromGithubConfigHandlerToHandler(sync))
}

func (c *githubConfigController) OnRemove(ctx context.Context, name string, sync GithubConfigHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromGithubConfigHandlerToHandler(sync)))
}

func (c *githubConfigController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *githubConfigController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *githubConfigController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *githubConfigController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *githubConfigController) Cache() GithubConfigCache {
	return &githubConfigCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *githubConfigController) Create(obj *v3.GithubConfig) (*v3.GithubConfig, error) {
	result := &v3.GithubConfig{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *githubConfigController) Update(obj *v3.GithubConfig) (*v3.GithubConfig, error) {
	result := &v3.GithubConfig{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *githubConfigController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *githubConfigController) Get(name string, options metav1.GetOptions) (*v3.GithubConfig, error) {
	result := &v3.GithubConfig{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *githubConfigController) List(opts metav1.ListOptions) (*v3.GithubConfigList, error) {
	result := &v3.GithubConfigList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *githubConfigController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *githubConfigController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v3.GithubConfig, error) {
	result := &v3.GithubConfig{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type githubConfigCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *githubConfigCache) Get(name string) (*v3.GithubConfig, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v3.GithubConfig), nil
}

func (c *githubConfigCache) List(selector labels.Selector) (ret []*v3.GithubConfig, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v3.GithubConfig))
	})

	return ret, err
}

func (c *githubConfigCache) AddIndexer(indexName string, indexer GithubConfigIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v3.GithubConfig))
		},
	}))
}

func (c *githubConfigCache) GetByIndex(indexName, key string) (result []*v3.GithubConfig, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v3.GithubConfig, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v3.GithubConfig))
	}
	return result, nil
}
