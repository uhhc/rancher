/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	v1 "github.com/rancher/rancher/pkg/apis/catalog.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type RepoHandler func(string, *v1.Repo) (*v1.Repo, error)

type RepoController interface {
	generic.ControllerMeta
	RepoClient

	OnChange(ctx context.Context, name string, sync RepoHandler)
	OnRemove(ctx context.Context, name string, sync RepoHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() RepoCache
}

type RepoClient interface {
	Create(*v1.Repo) (*v1.Repo, error)
	Update(*v1.Repo) (*v1.Repo, error)
	UpdateStatus(*v1.Repo) (*v1.Repo, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Repo, error)
	List(namespace string, opts metav1.ListOptions) (*v1.RepoList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Repo, err error)
}

type RepoCache interface {
	Get(namespace, name string) (*v1.Repo, error)
	List(namespace string, selector labels.Selector) ([]*v1.Repo, error)

	AddIndexer(indexName string, indexer RepoIndexer)
	GetByIndex(indexName, key string) ([]*v1.Repo, error)
}

type RepoIndexer func(obj *v1.Repo) ([]string, error)

type repoController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewRepoController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) RepoController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &repoController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromRepoHandlerToHandler(sync RepoHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.Repo
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.Repo))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *repoController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.Repo))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateRepoDeepCopyOnChange(client RepoClient, obj *v1.Repo, handler func(obj *v1.Repo) (*v1.Repo, error)) (*v1.Repo, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *repoController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *repoController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *repoController) OnChange(ctx context.Context, name string, sync RepoHandler) {
	c.AddGenericHandler(ctx, name, FromRepoHandlerToHandler(sync))
}

func (c *repoController) OnRemove(ctx context.Context, name string, sync RepoHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromRepoHandlerToHandler(sync)))
}

func (c *repoController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *repoController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *repoController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *repoController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *repoController) Cache() RepoCache {
	return &repoCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *repoController) Create(obj *v1.Repo) (*v1.Repo, error) {
	result := &v1.Repo{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *repoController) Update(obj *v1.Repo) (*v1.Repo, error) {
	result := &v1.Repo{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *repoController) UpdateStatus(obj *v1.Repo) (*v1.Repo, error) {
	result := &v1.Repo{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *repoController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *repoController) Get(namespace, name string, options metav1.GetOptions) (*v1.Repo, error) {
	result := &v1.Repo{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *repoController) List(namespace string, opts metav1.ListOptions) (*v1.RepoList, error) {
	result := &v1.RepoList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *repoController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *repoController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1.Repo, error) {
	result := &v1.Repo{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type repoCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *repoCache) Get(namespace, name string) (*v1.Repo, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1.Repo), nil
}

func (c *repoCache) List(namespace string, selector labels.Selector) (ret []*v1.Repo, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Repo))
	})

	return ret, err
}

func (c *repoCache) AddIndexer(indexName string, indexer RepoIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.Repo))
		},
	}))
}

func (c *repoCache) GetByIndex(indexName, key string) (result []*v1.Repo, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1.Repo, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1.Repo))
	}
	return result, nil
}

type RepoStatusHandler func(obj *v1.Repo, status v1.RepoStatus) (v1.RepoStatus, error)

type RepoGeneratingHandler func(obj *v1.Repo, status v1.RepoStatus) ([]runtime.Object, v1.RepoStatus, error)

func RegisterRepoStatusHandler(ctx context.Context, controller RepoController, condition condition.Cond, name string, handler RepoStatusHandler) {
	statusHandler := &repoStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromRepoHandlerToHandler(statusHandler.sync))
}

func RegisterRepoGeneratingHandler(ctx context.Context, controller RepoController, apply apply.Apply,
	condition condition.Cond, name string, handler RepoGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &repoGeneratingHandler{
		RepoGeneratingHandler: handler,
		apply:                 apply,
		name:                  name,
		gvk:                   controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterRepoStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type repoStatusHandler struct {
	client    RepoClient
	condition condition.Cond
	handler   RepoStatusHandler
}

func (a *repoStatusHandler) sync(key string, obj *v1.Repo) (*v1.Repo, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type repoGeneratingHandler struct {
	RepoGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *repoGeneratingHandler) Remove(key string, obj *v1.Repo) (*v1.Repo, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.Repo{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *repoGeneratingHandler) Handle(obj *v1.Repo, status v1.RepoStatus) (v1.RepoStatus, error) {
	objs, newStatus, err := a.RepoGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
